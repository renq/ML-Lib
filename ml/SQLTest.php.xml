<?xml version="1.0" encoding="UTF-8"?>
<testFile fullPath="/home/renq/Projects/www/ml_lib/tests//sql/SQLTest.php" shortenedPath="sql/SQLTest.php" generated="1298673637" phpunit="3.4.13">
  <line lineNumber="1">
    <body>&lt;?php</body>
  </line>
  <line lineNumber="2">
    <body></body>
  </line>
  <line lineNumber="3">
    <body></body>
  </line>
  <line lineNumber="4">
    <body>use ml\sql\SQL;</body>
  </line>
  <line lineNumber="5">
    <body>require_once dirname(__FILE__) . '/../../ml/ml.php';</body>
  </line>
  <line lineNumber="6">
    <body></body>
  </line>
  <line lineNumber="7">
    <body></body>
  </line>
  <line lineNumber="8">
    <body>class SQLTest extends PHPUnit_Framework_TestCase {</body>
  </line>
  <line lineNumber="9">
    <body></body>
  </line>
  <line lineNumber="10">
    <body></body>
  </line>
  <line lineNumber="11">
    <body>    </body>
  </line>
  <line lineNumber="12">
    <body>    public function testCreateByDSNMySQL() {</body>
  </line>
  <line lineNumber="13">
    <body>    	$dsn = 'mysql://root:pass@localhost/db';</body>
  </line>
  <line lineNumber="14">
    <body>    	$sql = \ml\sql\SQL::createByDSN($dsn);</body>
  </line>
  <line lineNumber="15">
    <body>    	$this-&gt;assertTrue($sql instanceof \ml\sql\SQL, 'SQL::createByDSN should returns instance of class SQL');</body>
  </line>
  <line lineNumber="16">
    <body>    	$this-&gt;assertTrue($sql-&gt;getConnection() instanceof \ml\sql\Connection_PDO_MySQL, 'Connection should be an instance of Connection_PDO_MySQL');</body>
  </line>
  <line lineNumber="17">
    <body>    	$this-&gt;assertTrue($sql-&gt;getStrategy() instanceof \ml\sql\Strategy_MySQL, 'Strategy should be an instance of Strategy_MySQL');</body>
  </line>
  <line lineNumber="18">
    <body>    }</body>
  </line>
  <line lineNumber="19">
    <body>    </body>
  </line>
  <line lineNumber="20">
    <body>    </body>
  </line>
  <line lineNumber="21">
    <body>	public function testCreateByDSNPostgresql() {</body>
  </line>
  <line lineNumber="22">
    <body>    	$dsn = 'pgsql://root:pass@localhost/db';</body>
  </line>
  <line lineNumber="23">
    <body>    	$sql = \ml\sql\SQL::createByDSN($dsn);</body>
  </line>
  <line lineNumber="24">
    <body>    	$this-&gt;assertTrue($sql instanceof \ml\sql\SQL, 'SQL::createByDSN should returns instance of class SQL');</body>
  </line>
  <line lineNumber="25">
    <body>    	$this-&gt;assertTrue($sql-&gt;getConnection() instanceof \ml\sql\Connection_PDO_PostgreSQL, 'Connection should be an instance of Connection_PDO_PostgreSQL');</body>
  </line>
  <line lineNumber="26">
    <body>    	$this-&gt;assertTrue($sql-&gt;getStrategy() instanceof \ml\sql\Strategy_PostgreSQL, 'Strategy should be an instance of Strategy_PostgreSQL');</body>
  </line>
  <line lineNumber="27">
    <body>    }</body>
  </line>
  <line lineNumber="28">
    <body>    </body>
  </line>
  <line lineNumber="29">
    <body>    </body>
  </line>
  <line lineNumber="30">
    <body>	public function testCreateByDSNSqlite() {</body>
  </line>
  <line lineNumber="31">
    <body>    	$dsn = 'sqlite:///some/file/';</body>
  </line>
  <line lineNumber="32">
    <body>    	$sql = \ml\sql\SQL::createByDSN($dsn);</body>
  </line>
  <line lineNumber="33">
    <body>    	$this-&gt;assertTrue($sql instanceof \ml\sql\SQL, 'SQL::createByDSN should returns instance of class SQL');</body>
  </line>
  <line lineNumber="34">
    <body>    	$this-&gt;assertTrue($sql-&gt;getConnection() instanceof \ml\sql\Connection_PDO_Sqlite, 'Connection should be an instance of Connection_PDO_PostgreSQL');</body>
  </line>
  <line lineNumber="35">
    <body>    	$this-&gt;assertTrue($sql-&gt;getStrategy() instanceof \ml\sql\Strategy_Sqlite, 'Strategy should be an instance of Strategy_Sqlite');</body>
  </line>
  <line lineNumber="36">
    <body>    }</body>
  </line>
  <line lineNumber="37">
    <body>    </body>
  </line>
  <line lineNumber="38">
    <body>    </body>
  </line>
  <line lineNumber="39">
    <body>	public function testCreateByDSNUnknownDatabase() {</body>
  </line>
  <line lineNumber="40">
    <body>		$this-&gt;setExpectedException('\ml\sql\Exception');</body>
  </line>
  <line lineNumber="41">
    <body>    	$dsn = 'someUnknownDatabase://someUser@someServer/someDtabase/';</body>
  </line>
  <line lineNumber="42">
    <body>    	$sql = \ml\sql\SQL::createByDSN($dsn);</body>
  </line>
  <line lineNumber="43">
    <body>    }</body>
  </line>
  <line lineNumber="44">
    <body>    </body>
  </line>
  <line lineNumber="45">
    <body>    </body>
  </line>
  <line lineNumber="46">
    <body>    private function methodCall($method) {</body>
  </line>
  <line lineNumber="47">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="48">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_MySQL', array($method), array($settings));</body>
  </line>
  <line lineNumber="49">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_MySQL', array(), array($connection));</body>
  </line>
  <line lineNumber="50">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="51">
    <body>    	</body>
  </line>
  <line lineNumber="52">
    <body>    	$connection-&gt;expects($this-&gt;once())-&gt;method($method);</body>
  </line>
  <line lineNumber="53">
    <body>    	$sql-&gt;$method();</body>
  </line>
  <line lineNumber="54">
    <body>    }</body>
  </line>
  <line lineNumber="55">
    <body>    </body>
  </line>
  <line lineNumber="56">
    <body>    </body>
  </line>
  <line lineNumber="57">
    <body>    public function testBeginTransaction() {</body>
  </line>
  <line lineNumber="58">
    <body>		$this-&gt;methodCall('beginTransaction');</body>
  </line>
  <line lineNumber="59">
    <body>    }</body>
  </line>
  <line lineNumber="60">
    <body>    </body>
  </line>
  <line lineNumber="61">
    <body>    </body>
  </line>
  <line lineNumber="62">
    <body>	public function testCommit() {</body>
  </line>
  <line lineNumber="63">
    <body>		$this-&gt;methodCall('commit');</body>
  </line>
  <line lineNumber="64">
    <body>    }</body>
  </line>
  <line lineNumber="65">
    <body>    </body>
  </line>
  <line lineNumber="66">
    <body>    </body>
  </line>
  <line lineNumber="67">
    <body>	public function testRollback() {</body>
  </line>
  <line lineNumber="68">
    <body>		$this-&gt;methodCall('rollback');</body>
  </line>
  <line lineNumber="69">
    <body>    }</body>
  </line>
  <line lineNumber="70">
    <body>    </body>
  </line>
  <line lineNumber="71">
    <body>    /*</body>
  </line>
  <line lineNumber="72">
    <body>	public function testGetDebug() {</body>
  </line>
  <line lineNumber="73">
    <body>		$this-&gt;methodCall('getDebug');</body>
  </line>
  <line lineNumber="74">
    <body>    }*/</body>
  </line>
  <line lineNumber="75">
    <body>    </body>
  </line>
  <line lineNumber="76">
    <body>    </body>
  </line>
  <line lineNumber="77">
    <body>    private function getSQLWithMocks() {</body>
  </line>
  <line lineNumber="78">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="79">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_MySQL', array(), array($settings));</body>
  </line>
  <line lineNumber="80">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_MySQL', array(), array($connection));</body>
  </line>
  <line lineNumber="81">
    <body>    	return new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="82">
    <body>    }</body>
  </line>
  <line lineNumber="83">
    <body>    </body>
  </line>
  <line lineNumber="84">
    <body>    </body>
  </line>
  <line lineNumber="85">
    <body>	public function testSaveInvalidTableName() {</body>
  </line>
  <line lineNumber="86">
    <body>		$this-&gt;setExpectedException('\InvalidArgumentException');</body>
  </line>
  <line lineNumber="87">
    <body>		$sql = $this-&gt;getSQLWithMocks();</body>
  </line>
  <line lineNumber="88">
    <body>    	$sql-&gt;save(array(), array());</body>
  </line>
  <line lineNumber="89">
    <body>    }</body>
  </line>
  <line lineNumber="90">
    <body>    </body>
  </line>
  <line lineNumber="91">
    <body>    </body>
  </line>
  <line lineNumber="92">
    <body>	public function testSaveInvalidParams() {</body>
  </line>
  <line lineNumber="93">
    <body>		$this-&gt;setExpectedException('\InvalidArgumentException');</body>
  </line>
  <line lineNumber="94">
    <body>		$sql = $this-&gt;getSQLWithMocks();</body>
  </line>
  <line lineNumber="95">
    <body>    	$sql-&gt;save('table', array('ala', 'ma', 'kota'));</body>
  </line>
  <line lineNumber="96">
    <body>    }</body>
  </line>
  <line lineNumber="97">
    <body>    </body>
  </line>
  <line lineNumber="98">
    <body>    </body>
  </line>
  <line lineNumber="99">
    <body>	public function testSaveEmpryParams() {</body>
  </line>
  <line lineNumber="100">
    <body>		$this-&gt;setExpectedException('\InvalidArgumentException');</body>
  </line>
  <line lineNumber="101">
    <body>		$sql = $this-&gt;getSQLWithMocks();</body>
  </line>
  <line lineNumber="102">
    <body>		$sql-&gt;save('table', array());</body>
  </line>
  <line lineNumber="103">
    <body>    }</body>
  </line>
  <line lineNumber="104">
    <body>    </body>
  </line>
  <line lineNumber="105">
    <body>    </body>
  </line>
  <line lineNumber="106">
    <body>	public function testSaveInsert() {</body>
  </line>
  <line lineNumber="107">
    <body>		$table = 'cat';</body>
  </line>
  <line lineNumber="108">
    <body>		$params = array('name' =&gt; 'Nennek', 'colour' =&gt; 'black');</body>
  </line>
  <line lineNumber="109">
    <body>		</body>
  </line>
  <line lineNumber="110">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="111">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_MySQL', array(), array($settings));</body>
  </line>
  <line lineNumber="112">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('query');</body>
  </line>
  <line lineNumber="113">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_MySQL', array(), array($connection));</body>
  </line>
  <line lineNumber="114">
    <body>		$strategy-&gt;expects($this-&gt;once())-&gt;method('insert');</body>
  </line>
  <line lineNumber="115">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="116">
    <body>    	$sql-&gt;save($table, $params);</body>
  </line>
  <line lineNumber="117">
    <body>    }</body>
  </line>
  <line lineNumber="118">
    <body>    </body>
  </line>
  <line lineNumber="119">
    <body>    </body>
  </line>
  <line lineNumber="120">
    <body>	public function testSaveUpdate() {</body>
  </line>
  <line lineNumber="121">
    <body>		$table = 'cat';</body>
  </line>
  <line lineNumber="122">
    <body>		$params = array('name' =&gt; 'Nennek', 'colour' =&gt; 'black');</body>
  </line>
  <line lineNumber="123">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="124">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_MySQL', array(), array($settings));</body>
  </line>
  <line lineNumber="125">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('query');</body>
  </line>
  <line lineNumber="126">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('getAffectedRows')-&gt;will($this-&gt;returnValue(1));</body>
  </line>
  <line lineNumber="127">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_MySQL', array(), array($connection));</body>
  </line>
  <line lineNumber="128">
    <body>		$strategy-&gt;expects($this-&gt;once())-&gt;method('update');</body>
  </line>
  <line lineNumber="129">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="130">
    <body>    	$sql-&gt;save($table, $params, 5);</body>
  </line>
  <line lineNumber="131">
    <body>    }</body>
  </line>
  <line lineNumber="132">
    <body>    </body>
  </line>
  <line lineNumber="133">
    <body>    </body>
  </line>
  <line lineNumber="134">
    <body>	public function testSaveUpdateWithWrongID() {</body>
  </line>
  <line lineNumber="135">
    <body>		$this-&gt;setExpectedException('\ml\sql\SqlException');</body>
  </line>
  <line lineNumber="136">
    <body>		$table = 'cat';</body>
  </line>
  <line lineNumber="137">
    <body>		$params = array('name' =&gt; 'Nennek', 'colour' =&gt; 'black');</body>
  </line>
  <line lineNumber="138">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="139">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_MySQL', array(), array($settings));</body>
  </line>
  <line lineNumber="140">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('query');</body>
  </line>
  <line lineNumber="141">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('getAffectedRows')-&gt;will($this-&gt;returnValue(0));</body>
  </line>
  <line lineNumber="142">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_MySQL', array(), array($connection));</body>
  </line>
  <line lineNumber="143">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="144">
    <body>    	$sql-&gt;save($table, $params, 100);</body>
  </line>
  <line lineNumber="145">
    <body>    }</body>
  </line>
  <line lineNumber="146">
    <body>    </body>
  </line>
  <line lineNumber="147">
    <body>    </body>
  </line>
  <line lineNumber="148">
    <body>	public function testDelete() {</body>
  </line>
  <line lineNumber="149">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="150">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="151">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('query');</body>
  </line>
  <line lineNumber="152">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="153">
    <body>		$strategy-&gt;expects($this-&gt;once())-&gt;method('delete');</body>
  </line>
  <line lineNumber="154">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="155">
    <body>    	$sql-&gt;delete('table', 1);</body>
  </line>
  <line lineNumber="156">
    <body>    }</body>
  </line>
  <line lineNumber="157">
    <body>    </body>
  </line>
  <line lineNumber="158">
    <body>    </body>
  </line>
  <line lineNumber="159">
    <body>    public function testQuery() {</body>
  </line>
  <line lineNumber="160">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="161">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="162">
    <body>		$connection-&gt;expects($this-&gt;once())-&gt;method('query');</body>
  </line>
  <line lineNumber="163">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="164">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="165">
    <body>    	$sql-&gt;query('SELECT * FROM table WHERE id = ?', array(1));</body>
  </line>
  <line lineNumber="166">
    <body>    }</body>
  </line>
  <line lineNumber="167">
    <body>    </body>
  </line>
  <line lineNumber="168">
    <body>    </body>
  </line>
  <line lineNumber="169">
    <body>    public function testOne() {</body>
  </line>
  <line lineNumber="170">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="171">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="172">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="173">
    <body>    	$strategy-&gt;expects($this-&gt;once())-&gt;method('one');</body>
  </line>
  <line lineNumber="174">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="175">
    <body>    	$sql-&gt;one('SELECT * FROM table WHERE id = ?', array(1));</body>
  </line>
  <line lineNumber="176">
    <body>    }</body>
  </line>
  <line lineNumber="177">
    <body>    </body>
  </line>
  <line lineNumber="178">
    <body>    </body>
  </line>
  <line lineNumber="179">
    <body>	public function testById() {</body>
  </line>
  <line lineNumber="180">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="181">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="182">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="183">
    <body>		$strategy-&gt;expects($this-&gt;once())-&gt;method('byId');</body>
  </line>
  <line lineNumber="184">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="185">
    <body>    	$sql-&gt;byId('table', 1);</body>
  </line>
  <line lineNumber="186">
    <body>    }</body>
  </line>
  <line lineNumber="187">
    <body>    </body>
  </line>
  <line lineNumber="188">
    <body>    </body>
  </line>
  <line lineNumber="189">
    <body>	public function testValue() {</body>
  </line>
  <line lineNumber="190">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="191">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="192">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="193">
    <body>    	$sql = $this-&gt;getMock('ml\sql\SQL', array('one'), array($connection, $strategy));</body>
  </line>
  <line lineNumber="194">
    <body>    	$sql-&gt;expects($this-&gt;any())-&gt;method('one')-&gt;will($this-&gt;returnValue(array('name' =&gt; 'Nennek', 'colour' =&gt; 'black')));</body>
  </line>
  <line lineNumber="195">
    <body>    	$this-&gt;assertEquals('Nennek', $sql-&gt;value('SELECT name FROM cat WHERE id = 1'));</body>
  </line>
  <line lineNumber="196">
    <body>    }</body>
  </line>
  <line lineNumber="197">
    <body>    </body>
  </line>
  <line lineNumber="198">
    <body>  </body>
  </line>
  <line lineNumber="199">
    <body>	public function testValueEmpty() {</body>
  </line>
  <line lineNumber="200">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="201">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="202">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="203">
    <body>    	$sql = $this-&gt;getMock('ml\sql\SQL', array('one'), array($connection, $strategy));</body>
  </line>
  <line lineNumber="204">
    <body>    	$sql-&gt;expects($this-&gt;any())-&gt;method('one')-&gt;will($this-&gt;returnValue(array()));</body>
  </line>
  <line lineNumber="205">
    <body>    	$this-&gt;assertFalse($sql-&gt;value('SELECT name FROM cat WHERE id = 1'));</body>
  </line>
  <line lineNumber="206">
    <body>    	$sql-&gt;expects($this-&gt;any())-&gt;method('one')-&gt;will($this-&gt;returnValue(false));</body>
  </line>
  <line lineNumber="207">
    <body>    	$this-&gt;assertFalse($sql-&gt;value('SELECT name FROM cat WHERE id = 1'));</body>
  </line>
  <line lineNumber="208">
    <body>    }</body>
  </line>
  <line lineNumber="209">
    <body>    </body>
  </line>
  <line lineNumber="210">
    <body>    </body>
  </line>
  <line lineNumber="211">
    <body>	public function testFlat() {</body>
  </line>
  <line lineNumber="212">
    <body>		$return = array(</body>
  </line>
  <line lineNumber="213">
    <body>			array('name' =&gt; 'Nennek', 'colour' =&gt; 'black'),</body>
  </line>
  <line lineNumber="214">
    <body>			array('name' =&gt; 'Misia', 'colour' =&gt; 'striped'),</body>
  </line>
  <line lineNumber="215">
    <body>			null</body>
  </line>
  <line lineNumber="216">
    <body>		);</body>
  </line>
  <line lineNumber="217">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="218">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="219">
    <body>    	$connection-&gt;expects($this-&gt;at(0))-&gt;method('query')-&gt;will($this-&gt;returnValue(true));</body>
  </line>
  <line lineNumber="220">
    <body>    	foreach ($return as $k =&gt; $item) {</body>
  </line>
  <line lineNumber="221">
    <body>    		$connection-&gt;expects($this-&gt;at($k+1))-&gt;method('fetch')-&gt;will($this-&gt;returnValue($item));</body>
  </line>
  <line lineNumber="222">
    <body>    	}</body>
  </line>
  <line lineNumber="223">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="224">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="225">
    <body>    	$this-&gt;assertEquals(array('Nennek', 'Misia'), $sql-&gt;flat('SELECT name FROM cat'));</body>
  </line>
  <line lineNumber="226">
    <body>    }</body>
  </line>
  <line lineNumber="227">
    <body>    </body>
  </line>
  <line lineNumber="228">
    <body>    </body>
  </line>
  <line lineNumber="229">
    <body>    public function testGet() {</body>
  </line>
  <line lineNumber="230">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="231">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="232">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="233">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="234">
    <body>    	$strategy-&gt;expects($this-&gt;never())-&gt;method('limit');</body>
  </line>
  <line lineNumber="235">
    <body>    	$sql-&gt;get("SELECT * FROM cat WHERE id = ?", array(1));</body>
  </line>
  <line lineNumber="236">
    <body>    	</body>
  </line>
  <line lineNumber="237">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="238">
    <body>    	$sql = new SQL($connection, $strategy);</body>
  </line>
  <line lineNumber="239">
    <body>    	$strategy-&gt;expects($this-&gt;once())-&gt;method('limit');</body>
  </line>
  <line lineNumber="240">
    <body>    	$sql-&gt;get("SELECT * FROM cat WHERE id = ?", array(1), 10, 20);</body>
  </line>
  <line lineNumber="241">
    <body>    }</body>
  </line>
  <line lineNumber="242">
    <body>    </body>
  </line>
  <line lineNumber="243">
    <body>    </body>
  </line>
  <line lineNumber="244">
    <body>    public function testDescribe() {</body>
  </line>
  <line lineNumber="245">
    <body>		$columns = array(</body>
  </line>
  <line lineNumber="246">
    <body>			array('table_catalog'=&gt;null,'table_schema'=&gt;'sql','table_name'=&gt;'table','column_name'=&gt;'id','ordinal_position'=&gt;1,'column_default'=&gt;null,'is_nullable'=&gt;'no','data_type'=&gt;'int','character_maximum_length'=&gt;null,'character_octet_length'=&gt;null,'numeric_precision'=&gt;10,'numeric_scale'=&gt;0,'character_set_name'=&gt;null,'collation_name'=&gt;null,'column_type'=&gt;'int(10) unsigned','column_key'=&gt;'pri','extra'=&gt;'auto_increment','privileges'=&gt;'select,insert,update,references','column_comment'=&gt;''),</body>
  </line>
  <line lineNumber="247">
    <body>			array('table_catalog'=&gt;null,'table_schema'=&gt;'sql','table_name'=&gt;'table','column_name'=&gt;'name','ordinal_position'=&gt;2,'column_default'=&gt;'','is_nullable'=&gt;'no','data_type'=&gt;'varchar','character_maximum_length'=&gt;255,'character_octet_length'=&gt;765,'numeric_precision'=&gt;null,'numeric_scale'=&gt;null,'character_set_name'=&gt;'utf8','collation_name'=&gt;'utf8_general_ci','column_type'=&gt;'varchar(255)','column_key'=&gt;'','extra'=&gt;'','privileges'=&gt;'select,insert,update,references','column_comment'=&gt;''),</body>
  </line>
  <line lineNumber="248">
    <body>			array('table_catalog'=&gt;null,'table_schema'=&gt;'sql','table_name'=&gt;'table','column_name'=&gt;'active','ordinal_position'=&gt;3,'column_default'=&gt;null,'is_nullable'=&gt;'no','data_type'=&gt;'tinyint','character_maximum_length'=&gt;null,'character_octet_length'=&gt;null,'numeric_precision'=&gt;3,'numeric_scale'=&gt;0,'character_set_name'=&gt;null,'collation_name'=&gt;null,'column_type'=&gt;'tinyint(1)','column_key'=&gt;'','extra'=&gt;'','privileges'=&gt;'select,insert,update,references','column_comment'=&gt;'')</body>
  </line>
  <line lineNumber="249">
    <body>		);</body>
  </line>
  <line lineNumber="250">
    <body></body>
  </line>
  <line lineNumber="251">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="252">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array('connect'), array($settings));</body>
  </line>
  <line lineNumber="253">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="254">
    <body>    	$sql = $this-&gt;getMock('ml\sql\SQL', array('get'), array($connection, $strategy));</body>
  </line>
  <line lineNumber="255">
    <body>    	$strategy-&gt;expects($this-&gt;once())-&gt;method('describe');</body>
  </line>
  <line lineNumber="256">
    <body>    	$sql-&gt;expects($this-&gt;once())-&gt;method('get')-&gt;will($this-&gt;returnValue($columns));</body>
  </line>
  <line lineNumber="257">
    <body>    	$sql-&gt;describe('table');</body>
  </line>
  <line lineNumber="258">
    <body>    }</body>
  </line>
  <line lineNumber="259">
    <body>    </body>
  </line>
  <line lineNumber="260">
    <body>    </body>
  </line>
  <line lineNumber="261">
    <body>    public function testDescribeFail() {</body>
  </line>
  <line lineNumber="262">
    <body>		$columns = array(</body>
  </line>
  <line lineNumber="263">
    <body>			array('table_catalog'=&gt;null,'table_schema'=&gt;'sql','table_name'=&gt;'table','column_name'=&gt;'id','ordinal_position'=&gt;1,'column_default'=&gt;null,'is_nullable'=&gt;'no','data_type'=&gt;'int','character_maximum_length'=&gt;null,'character_octet_length'=&gt;null,'numeric_precision'=&gt;10,'numeric_scale'=&gt;0,'character_set_name'=&gt;null,'collation_name'=&gt;null,'column_type'=&gt;'int(10) unsigned','column_key'=&gt;'pri','extra'=&gt;'auto_increment','privileges'=&gt;'select,insert,update,references','column_comment'=&gt;''),</body>
  </line>
  <line lineNumber="264">
    <body>			array('table_catalog'=&gt;null,'table_schema'=&gt;'sql','table_name'=&gt;'table','column_name'=&gt;'name','ordinal_position'=&gt;2,'column_default'=&gt;'','is_nullable'=&gt;'no','data_type'=&gt;'varchar','character_maximum_length'=&gt;255,'character_octet_length'=&gt;765,'numeric_precision'=&gt;null,'numeric_scale'=&gt;null,'character_set_name'=&gt;'utf8','collation_name'=&gt;'utf8_general_ci','column_type'=&gt;'varchar(255)','column_key'=&gt;'','extra'=&gt;'','privileges'=&gt;'select,insert,update,references','column_comment'=&gt;''),</body>
  </line>
  <line lineNumber="265">
    <body>			array('table_catalog'=&gt;null,'table_schema'=&gt;'sql','table_name'=&gt;'table','column_name'=&gt;'active','ordinal_position'=&gt;3,'column_default'=&gt;null,'is_nullable'=&gt;'no','data_type'=&gt;'tinyint','character_maximum_length'=&gt;null,'character_octet_length'=&gt;null,'numeric_precision'=&gt;3,'numeric_scale'=&gt;0,'character_set_name'=&gt;null,'collation_name'=&gt;null,'column_type'=&gt;'tinyint(1)','column_key'=&gt;'','extra'=&gt;'','privileges'=&gt;'select,insert,update,references','column_comment'=&gt;'')</body>
  </line>
  <line lineNumber="266">
    <body>		);</body>
  </line>
  <line lineNumber="267">
    <body>		$this-&gt;setExpectedException('ml\sql\SqlException');</body>
  </line>
  <line lineNumber="268">
    <body></body>
  </line>
  <line lineNumber="269">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="270">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array('connect'), array($settings));</body>
  </line>
  <line lineNumber="271">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="272">
    <body>    	$sql = $this-&gt;getMock('ml\sql\SQL', array('get'), array($connection, $strategy));</body>
  </line>
  <line lineNumber="273">
    <body>    	$strategy-&gt;expects($this-&gt;once())-&gt;method('describe');</body>
  </line>
  <line lineNumber="274">
    <body>    	$sql-&gt;expects($this-&gt;once())-&gt;method('get')-&gt;will($this-&gt;returnValue(false));</body>
  </line>
  <line lineNumber="275">
    <body>    	$sql-&gt;describe('table');</body>
  </line>
  <line lineNumber="276">
    <body>    }</body>
  </line>
  <line lineNumber="277">
    <body>    </body>
  </line>
  <line lineNumber="278">
    <body>    </body>
  </line>
  <line lineNumber="279">
    <body>    public function testSaveFromRequest() {</body>
  </line>
  <line lineNumber="280">
    <body>		$columns = array(</body>
  </line>
  <line lineNumber="281">
    <body>			'id' =&gt; true,</body>
  </line>
  <line lineNumber="282">
    <body>			'name' =&gt; true,</body>
  </line>
  <line lineNumber="283">
    <body>			'colour' =&gt; true,</body>
  </line>
  <line lineNumber="284">
    <body>		);</body>
  </line>
  <line lineNumber="285">
    <body>		$_REQUEST['id'] = 3;</body>
  </line>
  <line lineNumber="286">
    <body>		$_REQUEST['name'] = 'Nennek';</body>
  </line>
  <line lineNumber="287">
    <body>		$_REQUEST['colour'] = 'black';</body>
  </line>
  <line lineNumber="288">
    <body></body>
  </line>
  <line lineNumber="289">
    <body>    	$settings = $this-&gt;getMock('ml\sql\Settings');</body>
  </line>
  <line lineNumber="290">
    <body>    	$connection = $this-&gt;getMock('ml\sql\Connection_PDO_Sqlite', array(), array($settings));</body>
  </line>
  <line lineNumber="291">
    <body>    	$strategy = $this-&gt;getMock('ml\sql\Strategy_Sqlite', array(), array($connection));</body>
  </line>
  <line lineNumber="292">
    <body>    	$sql = $this-&gt;getMock('ml\sql\SQL', array('describe', 'save'), array($connection, $strategy));</body>
  </line>
  <line lineNumber="293">
    <body>    	$sql-&gt;expects($this-&gt;once())-&gt;method('describe')-&gt;will($this-&gt;returnValue($columns));</body>
  </line>
  <line lineNumber="294">
    <body>    	$sql-&gt;expects($this-&gt;once())-&gt;method('save')-&gt;will($this-&gt;returnValue(3));</body>
  </line>
  <line lineNumber="295">
    <body>    	$this-&gt;assertEquals(3, $sql-&gt;saveFromRequest('table'));</body>
  </line>
  <line lineNumber="296">
    <body>    }</body>
  </line>
  <line lineNumber="297">
    <body>    </body>
  </line>
  <line lineNumber="298">
    <body></body>
  </line>
  <line lineNumber="299">
    <body></body>
  </line>
  <line lineNumber="300">
    <body>}</body>
  </line>
</testFile>
